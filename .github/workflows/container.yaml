name: Build Container Images

on:
  push:
    tags:
      - '*.*.*'

env:
  REGISTRY: ghcr.io
  ORG_NAME: ${{ github.repository_owner }}
  CARGO_INCREMENTAL: 0

jobs:
  get_metadata:
    name: Generate Container Metadata
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      base_tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout repository (required for semver tag discovery)
        uses: actions/checkout@v4
      
      - name: Container metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ github.event.repository.name }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}

  build_amd64:
    name: Build & Push (linux/amd64)
    runs-on: ubuntu-latest
    needs: [get_metadata]
    permissions:
      contents: read
      packages: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          labels: ${{ needs.get_metadata.outputs.labels }}
          tags: ${{ needs.get_metadata.outputs.tags }}-amd64
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_arm64:
    name: Build & Push (linux/arm64)
    runs-on: ubuntu-latest 
    needs: [get_metadata]
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          labels: ${{ needs.get_metadata.outputs.labels }}
          tags: ${{ needs.get_metadata.outputs.tags }}-arm64
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create_manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [get_metadata, build_amd64, build_arm64] 
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create and Push Manifest
        run: |
          BASE_TAG=${{ needs.get_metadata.outputs.base_tag }}

          docker manifest create "${BASE_TAG}" \
            "${BASE_TAG}-amd64" \
            "${BASE_TAG}-arm64"
            
          docker manifest push "${BASE_TAG}"
